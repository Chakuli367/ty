
  const handleAvatarNext = () => {
    setCurrentStep("conversation");
  };

  // Chat API conversation mutation
  const conversationMutation = useMutation({
    mutationFn: async ({
      messages,
      avatar,
    }: {
      messages: Message[];
      avatar: Avatar;
    }) => {
      const userMessages = messages.filter((m) => m.role === "user");
      const latestUserMessage = userMessages[userMessages.length - 1];
      const messageContent = latestUserMessage?.content || "";

      const firstUserMessage = userMessages[0];
      const goalName = firstUserMessage?.content || "social skills improvement";

      const response = await fetch("https://one23-u2ck.onrender.com/chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          user_id: "user_123",
          message: messageContent,
          goal_name: goalName,
        }),
      });
      return await response.json();
    },
    onSuccess: (response) => {
      let messageContent = "";
      let shouldGeneratePlan = false;

      if (response?.reply) {
        messageContent = response.reply;
        shouldGeneratePlan = messages.length >= 12;
      } else if (response?.error) {
        messageContent =
          "I had trouble processing that. Could you tell me more about your goals?";
      } else {
        messageContent =
          "I understand. Could you tell me more about what you'd like to achieve?";
      }

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: messageContent,
      };

      setMessages((prev) => [...prev, aiMessage]);
      setIsLoading(false);

      if (shouldGeneratePlan) {
        setTimeout(() => {
          setCurrentStep("plan");
          setIsGeneratingPlan(true);
          planMutation.mutate();
        }, 2000);
      }
    },
    onError: () => {
      setIsLoading(false);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content:
          "I'm having trouble connecting to my AI brain right now. Let me try a different approach - what specific social skill challenge would you like to work on?",
      };
      setMessages((prev) => [...prev, errorMessage]);
    },
  });

  // External API plan generation mutation
  const planMutation = useMutation({
    mutationFn: async () => {
      const userAnswers = messages
        .filter((m) => m.role === "user")
        .map((m) => m.content);
      const goalName = userAnswers[0] || "social skills improvement";

      const response = await fetch(
        "https://one23-u2ck.onrender.com/final-plan",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            goal_name: goalName,
            user_answers: userAnswers,
            avatar: selectedAvatar,
          }),
        },
      );
      return await response.json();
    },
    onSuccess: async (response) => {
      let plan = null;
      if (response?.success && response?.plan) {
        plan = response.plan;
      }

      if (plan) {
        // Save plan to Firestore under plans/{user.uid}/plan
        try {
          const userId = "user123";
          await fetch("https://one23-u2ck.onrender.com/api/save-plan", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              userId: userId,
              plan: plan,
            }),
          });
        } catch (error) {
          console.error("Error saving plan to Firestore:", error);
        }

        setGeneratedPlan(plan);
      }
      setIsGeneratingPlan(false);
    },
    onError: () => {
      setIsGeneratingPlan(false);
    },
  });